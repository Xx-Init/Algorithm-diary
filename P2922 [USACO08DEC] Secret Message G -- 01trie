#include <bits/stdc++.h>
#define DEBUG cout << "---------- " << __LINE__ << " ----------" << endl;
#define endl "\n"
#define SZ(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define count1_Binary(x) __builtin_popcountll(x)//求一个数二进制里有多少个1
#define smallest_1(x) __builtin_ffsll(x)//求最小的1在第几位
using namespace std;
using ll = long long;
using u64 = unsigned long long;
const int inf = 0x7fffffff;
const long long mod = 1e9+7;
const double Pi = acos(-1);
const int N = 5e5+6;
inline ll read(){ll x=0;char z;while((z=getchar())<48);do x=x*10+(z^48);while((z=getchar())>47);return x;}
//<head>

//01trie

//直接通过01trie进行统计

int trie[N][2], idx = 2, num[N];

void insert(string s){
    int p = 1;
    for(auto &i: s){
        int u = i-48;
        num[p] ++;
        if(!trie[p][u]) trie[p][u] = idx ++;
        p = trie[p][u];
    }
    num[p] ++;
}

int query(string s){
    int p = 1, ans = num[p];
    for(auto &i: s){
        int u = i-48;
        ans -= num[trie[p][u^1]]; //直接减去另一条路的节点个数
        p = trie[p][u];
    }
    return ans;
}

void solve(){
    int m, n, k;
    cin>> m>> n;
    string s1;
    char c;
    while(m --){
        cin>> k;
        s1 = "";
        while(k --){cin>> c; s1 += c;}
        insert(s1);
    }
    while(n --){
        cin>> k;
        s1 = "";
        while(k --){cin>> c; s1 += c;}
        cout<< query(s1)<< endl;
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}


