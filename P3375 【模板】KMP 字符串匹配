#include <bits/stdc++.h>
#define DEBUG cout << "---------- " << __LINE__ << " ----------" << endl;
#define endl "\n"
#define SZ(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define count1_Binary(x) __builtin_popcountll(x)//求一个数二进制里有多少个1
#define smallest_1(x) __builtin_ffsll(x)//求最小的1在第几位
using namespace std;
using ll = long long;
using u64 = unsigned long long;
const int inf = 0x7fffffff;
const long long mod = 1e9+7;
const double Pi = acos(-1);
const int N = 1e6+6;
inline ll read(){ll x=0;char z;while((z=getchar())<48);do x=x*10+(z^48);while((z=getchar())>47);return x;}
//<head>

//kmp匹配模板，前缀函数模板  O(n)
//----------------------------------------写法1-------------------------------------------
vector<int> prefix_function(string s){ //前缀函数
    int len = s.size();
    vector<int> pi(len);
    for(int i = 1; i < len; i ++){
        int j = pi[i-1];
        while(j && s[i] != s[j]) j = pi[j-1];
        if(s[i] == s[j]) j ++;
        pi[i] = j;
    }
    return pi;
}

void solve(){
    string text, pat, cur;  //匹配串， 模式串, 合并
    vector<int> lps;
    cin>> text>> pat;
    //---------------------------kmp---------------------------
    cur = pat+'#'+text;
    lps = prefix_function(cur);
    int len1 = SZ(pat), len = SZ(cur);
    for(int i = len1+1; i < len; i ++)
        if(lps[i] == len1) cout<< i-2*len1+1<< endl; //输出模式串出现位置
    //---------------------------------------------------------
    for(int i = 0; i < len1; i ++) cout<< lps[i]<< ' ';
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}


//--------------------------------------------写法2----------------------------------------------

int nxt[N];

void solve(){
    string text, pat;
    cin>> text>> pat;
    int len1 = SZ(text), len2 = SZ(pat), j;
    for(int i = 1; i < len2; i ++){ // 自己匹配自己
        j = nxt[i-1];
        while(j && pat[i] != pat[j]) j = nxt[j-1];
        if(pat[i] == pat[j]) j ++;
        nxt[i] = j;
    }
    j = 0;
    for(int i = 0; i < len1; i ++){ //模式串匹配主串
        while(j && text[i] != pat[j]) j = nxt[j-1];
        if(text[i] == pat[j]) j ++;
        if(j == len2) cout<< i-len2+2<< endl;
    }
    for(int i = 0; i < len2; i ++) cout<< nxt[i]<< ' ';
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}





