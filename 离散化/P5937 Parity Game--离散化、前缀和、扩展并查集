#include <bits/stdc++.h>
#define DEBUG cout << "---------- " << __LINE__ << " ----------" << endl;
#define endl "\n"
#define SZ(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define count1_Binary(x) __builtin_popcountll(x)//求一个数二进制里有多少个1
#define smallest_1(x) __builtin_ffsll(x)//求最小的1在第几位
using namespace std;
using ll = long long;
using u64 = unsigned long long;
const int inf = 0x7fffffff;
const long long mod = 1e9+7;
const double Pi = acos(-1);
const int N = 1e4+6;
inline ll read(){ll x=0;char z;while((z=getchar())<48);do x=x*10+(z^48);while((z=getchar())>47);return x;}
//<head>

// 离散化，前缀和，扩展并查集（种类并查集）


//题解：首先想到并查集，但n太大，显然不能直接进行并查集合并，看到m很小，便可通过离散化使其范围变小。
//然后通过扩展并查集配合前缀和实现判断当前命题是否与之前的矛盾的功能

struct Node{
    int x, y, z;
}A[N];

int fa[N*2], B[N*2], tot = 1;

inline void init(int n){
    for(int i = 0; i <= n; i ++) fa[i] = i;
}

inline int find(int x){
    if(fa[x] == x) return x;
    else return fa[x] = find(fa[x]);
}

inline void merge(int x, int y){
    fa[find(x)] = find(y);
}

inline bool same(int x, int y){
    return find(x) == find(y);
}

void solve(){
    int n, m;
    cin>> n>> m;
    string ch;
    for(int i = 1; i <= m; i ++){
        cin>> A[i].x>> A[i].y>> ch;
        A[i].x --;//为了前缀和方便直接-1
        A[i].z = (ch[0] == 'o'? 1: 0);
        B[tot ++] = A[i].x;
        B[tot ++] = A[i].y;
    }
    init(tot*2);  //扩展并查集 其中0~tot-1表示这一位是奇数，tot~tot*2-1表示这一位是偶数
    //------------------------离散化-----------------
    sort(B+1, B+tot+1);
    tot = unique(B+1, B+tot+1)-B-1;
    for(int i = 1; i <= m; i ++){
        A[i].x = lower_bound(B+1, B+tot+1, A[i].x)-B-1;
        A[i].y = lower_bound(B+1, B+tot+1, A[i].y)-B-1;
    }
    //-----------------------种类并查集-----------------------
    for(int i = 1; i <= m; i ++){
        if(A[i].z == 1){ //此时，前缀和S[x]与S[y]应该不在同一集合
            if(same(A[i].x, A[i].y)){
                cout<< i-1;
                return;
            }else{
                merge(A[i].x, A[i].y+tot); //合并x是奇数和y是偶数
                merge(A[i].x+tot, A[i].y); //合并y是奇数和x是偶数
            }
        }else{
            if(same(A[i].x, A[i].y+tot)){
                cout<< i-1;
                return;
            }else{
                merge(A[i].x, A[i].y);
                merge(A[i].x+tot, A[i].y+tot);
            }
        }
    }
    cout<< m;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}


