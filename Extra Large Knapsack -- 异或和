题目： 对于一个序列W1, W2, W3, W4....Wn,将其分成两组，使两个序列的异或和相同，每组至少有一个元素。



#include <bits/stdc++.h>
#define DEBUG cout << "---------- " << __LINE__ << " ----------" << endl;
#define endl "\n"
#define SZ(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define count1_Binary(x) __builtin_popcountll(x)//求一个数二进制里有多少个1
#define smallest_1(x) __builtin_ffsll(x)//求最小的1在第几位
using namespace std;
using ll = long long;
using u64 = unsigned long long;
const int inf = 0x7fffffff;
const long long mod = 1e9+7;
const double Pi = acos(-1);
const int N = 1e5+6;
inline ll read(){ll x=0;char z;while((z=getchar())<48);do x=x*10+(z^48);while((z=getchar())>47);return x;}
//<head>

///异或和

//思路： 对于一个序列，若满足题意，必有序列的异或和为0. 因此，我们可以把异或后异或和为0的那一个放入另一个背包。注意全是0的情况。

int x;
void solve(){
    int n, m, k;
    string s;
    cin>> n;
    while(n --){
        s = "";
        x = 0;
        cin>> m;
        if(m == 1){
            cin>> k;
            cout<< "NO\n";
            continue;
        }
        while(m --){
            cin>> k;
            x = x^k;
            if(k == 0 && m != 0){s +='0'; continue;}
            /*while(k){cout<< k%2<< ' '; k /= 2;}
            cout<< endl;*/
            if(x) s += '0';
            else s += '1';
        }

        if(!x) cout<< "YES\n"<< s<< endl;
        else cout<< "NO\n";
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}


