#include <bits/stdc++.h>
#define DEBUG cout << "---------- " << __LINE__ << " ----------" << endl;
#define endl "\n"
#define SZ(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define count1_Binary(x) __builtin_popcountll(x)//求一个数二进制里有多少个1
#define smallest_1(x) __builtin_ffsll(x)//求最小的1在第几位
using namespace std;
using ll = long long;
using u64 = unsigned long long;
const long long inf = 0x7ffffffffff;
const long long mod = 1e9+7;
const double Pi = acos(-1);
const int N = 2e5+6;
inline ll read(){ll x=0;char z;while((z=getchar())<48);do x=x*10+(z^48);while((z=getchar())>47);return x;}
//<head>

//二分、前缀和

//题解 ： 观察到随着W的增大，结果Y会随着减小，具有单调性，可以使用二分枚举答案

struct Node{
    int w, v;
}A[N];

struct Boundary{
    int l, r;
}B[N];

int n, m, minW = 1e6, maxW = 0;
ll preNum[N], preW[N], s;

ll check(int W){
    memset(preNum, 0, sizeof(preNum));
    memset(preW, 0, sizeof(preW));
    for(int i = 1 ; i <= n ; i ++){
        if(A[i].w >= W){
            preNum[i] = preNum[i-1]+1;
            preW[i] = preW[i-1]+A[i].v;
        }else{
            preNum[i] = preNum[i-1];
            preW[i] = preW[i-1];
        }
    }
    ll ans = 0;
    for(int i = 1; i <= m; i ++){
        ans += (preW[B[i].r]-preW[B[i].l-1])*(preNum[B[i].r]-preNum[B[i].l-1]);
    }
    return ans;
} 

void solve(){
    cin>> n>> m>> s;
    for(int i = 1; i <= n; i ++){
        cin>> A[i].w>> A[i].v;
        minW = min(minW, A[i].w);
        maxW = max(maxW, A[i].w);
    }
    for(int i = 1; i <= m ; i ++) cin>> B[i].l>> B[i].r;
    int left = minW, right = maxW+1, mid = (left+right)>>1;
    ll tmp, ans = inf;
    while(left <= right){
        tmp = check(mid);
        ans = min(abs(tmp-s), ans);
        if(tmp - s == 0) break;
        else if(tmp - s > 0) left = mid + 1;
        else right = mid - 1;
        mid = (left+right)>>1;
    }
    cout<< ans;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}


