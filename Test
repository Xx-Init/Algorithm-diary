#include <bits/stdc++.h>
#define DEBUG cout << "---------- " << __LINE__ << " ----------" << endl;
#define endl "\n"
#define SZ(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define count1_Binary(x) __builtin_popcountll(x)//求一个数二进制里有多少个1
#define smallest_1(x) __builtin_ffsll(x)//求最小的1在第几位
using namespace std;
using ll = long long;
using u64 = unsigned long long;
const int inf = 0x7fffffff;
const long long mod = 1e9+7;
const double Pi = acos(-1);
const int N = 1e5+6;
inline ll read(){ll x=0;char z;while((z=getchar())<48);do x=x*10+(z^48);while((z=getchar())>47);return x;}
//<head>

//kmp（获得两个字符串的前后缀，用于获得同时包含s1, s2的最短字符串）  暴力枚举
/*
通过kmp预处理出每个s[i]与s[j]的最长公共前缀和后缀，然后直接暴力枚举各种排列情况；
*/
int nxt[4][N], len[4], K[4][4];  //next数组， 长度，  对应字符串的前缀后缀
string s[4];

void getnxt(int id){
    for(int i = 1; i < len[id]; i ++){
        int j = nxt[id][i-1];
        while(j && s[id][i] != s[id][j]) j = nxt[id][j-1];
        if(s[id][i] == s[id][j]) j ++;
        nxt[id][i] = j;
    }
}

int kmp(int id1, int id2){ //s[id1]去匹配s[id2];
    int j = 0;
    for(int i = 0; i < len[id2]; i ++){
        while(j && s[id2][i] != s[id1][j]) j = nxt[id1][j-1];
        if(s[id2][i] == s[id1][j]) j ++;
        if(j == len[id1]) return -1;  //s[id2]包含了s[id1];
    }
    return j;
}

void solve(){
    cin>> s[1]>> s[2]>> s[3];
    for(int i = 1; i <= 3; i ++){len[i] = SZ(s[i]); getnxt(i);}
    for(int i = 1; i <= 3; i ++)
        for(int j = 1; j <= 3; j ++)
            if(i != j) K[i][j] = kmp(j, i);  //以s[i], s[j]为顺序进行kmp求最大前后缀
    int ans = len[1]+len[2]+len[3], sum;
    for(int i = 1; i <= 3; i ++){
        for(int j = 1; j <= 3; j ++){
            for(int k = 1; k <= 3; k ++){
                if(i == j || i == k || j == k) continue;
                if(K[i][j] >= 0 && K[j][k] >= 0) sum = len[i]+len[j]+len[k]-K[i][j]-K[j][k];
                else if(K[i][j] < 0 && K[j][k] < 0) sum = len[i];
                else if(K[i][j] >= 0) sum = len[i]+len[j]-K[i][j];
                else sum = len[i]+len[k]-K[i][k];
            ans = min(sum, ans);
            }
        }
    }
    cout<< ans<< endl;
    /*for(int i = 1; i <= 3; i ++){
        for(int j = 1; j <= 3; j ++)
            if(i != j) cout<< K[i][j]<< ' ';
        cout<< endl;
    }*/
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}


